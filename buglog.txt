Checkpoint 1:

1) 

Bug: The code would continue to bootloop even though gdt was initalized correctly

Fix: Had to comment out the function that would run tests

2)

Bug: RTC and keyboard interrupt handlers only ran once

Fix: Needed to have assembly linkage around handlers to properly call `iret`

3)

Bug: RTC interrupt handler only ran once still

Fix: Didn't fully read RTC documentation, forgot to read from C register in handler

4)

Bug: EOI to a device on slave PIC wasn't working

Fix: Forgot to send EOI to master PIC as well in `send_eoi` function

5)

Bug: Bootlooping on devel

Fix: Missing paranthesis around definition

6)

Bug: Print statements crashed devel/info mem only showing one entry

Fix: Had to enable the page table for video memory

Checkpoint 2:

1)

Bug: Was only able to backspace once

Fix: Forgot to subtract variable keeping track of number of characters in buffer

2)

Bug: Control-L would clear the terminal but also print the letter "l"

Fix: Had to exit keyboard handler after clearing terminal

3)

Bug: Some keys would print incorrect characters on screen

Fix: Our scancodes were slightly off (e.g. pressing z would print x)

4) 

Bug: Page fault when trying to test read_dentry_by_name and index

Fix: When passing in the dentry I was not intalizing it so it was NULL and was getting derfrenced

5) 

Bug: Executables files would only print the last few chars 12345...XYZ and the first half of the file would be overwritten.

Fix: I was printing NULL terminator so I had to make sure im not putc '/0'

6) 

Bug: Read data would not change buffer at all

Fix: My logic was incorrect because I forgot the inode contains block index and thats how we refrence block data

Checkpoint 3:

1)

Bug: When entering commands into the shell, the command would get cutoff to only the first 3 characters.

Fix: In the syscall handler's assembly linkage, %eax had to be set to the handler's return value instead of being preserved.

2)

Bug: Page fault when exiting from base shell.

Fix: Had to take care of that special case in halt, and call execute(shell) again.

3)

Bug: Page faults at the end of halt when returning to execute.

Fix: We had to actually understand what "returning to execute" meant, and properly restore ebp.

4)

Bug: File opens weren't working.

Fix: We were accidentally returning -1 instead of the file descriptor # in the open syscall.

Checkpoint 4:

1)

Bug: Running `cat` would print the file an infinite number of times.

Fix: Had some issues with the file object's offset not being accounted for when reading a file.

2)

Bug: `syserr` would fail - running `shel` instead of `shell` worked.

Fix: Fixed string comparison edge cases when checking if a file exists.

3)

Bug: fish would not print anything but something would run in the background.

Fix: Forgot to change the page size to 4KB in the page directory so it wouldn't acess the page table.

4)

Bug: fish would not print only / and I and the rest would be blank.

Fix: If statment in read_data would make it break out of the loop so the read_count would be zero.

5)

Bug: syserr test #5 didn't work (didn't print anything).

Fix: Closing the stdin file descriptor accidentally marked the fd as available, stopping anything from printing.

Checkpoint 5:

1)

Bug: Cursors were not updated correctly while switching terminals

Fix: Needed to create a setter and getter function for saving the current cursor and restoring the correct position.

2)

Bug: If shell was running in terminal 1, typing characters and pressing enter in terminal 2 would write to terminal 1's buffer.

Fix: Fixed `terminal_read` to read from the terminal it was initially called from, not the current terminal.